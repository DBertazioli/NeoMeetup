{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "from kafka import KafkaConsumer\n",
    "import time\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "consumer = KafkaConsumer(bootstrap_servers = 'sandbox-hdf.hortonworks.com:6667', auto_offset_reset = 'earliest', consumer_timeout_ms = 1000)\n",
    "consumer.subscribe(['project_1'])\n",
    "\n",
    "#messages = [] #inizializzo lista\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "while True:\n",
    "    for message in consumer:\n",
    "        print(message[6])\n",
    "        messages.append(message[6])\n",
    "    time.sleep(5)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "j = json.loads(messages[1]) #formatto il singolo messaggio di kafka in json\n",
    "print j['value'] #mi restituisce il contenuto di value\n",
    "print j['value']['lat'] #mi restituisce il valore di lat all'interno di value\n",
    "\t\t\t#Cos√¨ tutto funziona ma appunto abbiamo solo un elemento convertito\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "j = json.loads(messages) #Restituisce errore\n",
    "\n",
    "j = []\n",
    "while True:\n",
    "\tfor message in messages:\n",
    "\t\tj.append(json.loads(message)) #Va in loop e mi crasha python\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
